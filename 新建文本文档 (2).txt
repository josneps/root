Redis数据持久化
    RDB：时间间隔（s秒） 存的是数据 （恢复数据块）
    AOF：set 1.实时，2.1s一次，3.交给操作系统  存的是指令 （数据完整性高）
主从同步：
    主1：i/o线程 往 binlog写日志
    从2：
负载均衡：



优化
第一：
    图片要经过压缩
    js css 文件要压缩
    js css 可以合并加载
    js css 可以放CDN
    前端终极优化CDN

第二：数据库优化
    MySQL 慢查询日志
    1：直接修改mysql 配置文件
    2：临时启动mysql配置
    3：通过top命令查看当前内存的使用情况
    4：开启慢查询时设置时间
    5：分析：通过explain，
    当原本SQL查询可慢可慢的时候可以加索引
    索引分类（主键索引，普通索引，唯一索引，全文索引，联合索引），
    mysql5.6以后都支持索引，
    缓存，分表，主从，主主，


接口api：
    登录
    第一步：签名验证
        1：数组（排序）并去除空值，
        2：拼接字符串  ？参数名=值&参数名=值
        3：进行MD5字符串加密
        4：MD5（第三步的结果.秘钥）得到签名字符串
    第二步：参数
        1：业务参数
        2：签名字符串
        3：时间戳（）在拼接字符串时验证时间戳
    第三步：数据加密
        1：对称加密
        2：非对称加密
        HTTPS自带数据加密


方向：
    第一：服务器
        负载均衡（三层，七层）
        session共享
        三层架构
        msvc
        docker
        elasticsearch
        kaffka日志
        rabbitmq（队列）
        服务器监控

    第二：数据库
        分区（就是把一张表的数据分成N个区块，在逻辑上看最终只是一张表，但底层是由N个物理区块组成的）

        分表（就是把一张表按一定的规则分解成N个具有独立存储空间的实体表。系统读写时需要根据定义好的规则得到对应的字表明，然后操作它。）
            1.水平分表
            2.垂直分表

        分库（一旦分表，一个库中的表会越来越多）
        
        索引
        慢查询
        explain
        主从/主主
        分区
        百万数据/千万数据/亿数据
        TiDB

    第三：缓存
        Redis
        MongoDB
        ssdb
        HBASE
        Redis集群
        Redis主从
        memcache 分布式